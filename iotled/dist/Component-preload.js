/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "vspiotled/Component-preload",
	"modules": {
		"vspiotled/view/main.view.xml": "<mvc:View xmlns:l=\"sap.ui.layout\" xmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"vspiotled.controller.main\" displayBlock=\"true\">\n\t<App id=\"main\">\n\t\t<pages>\n\t\t\t<Page title=\"{i18n>title}\">\n\t\t\t\t<content>\n\t\t\t\t\t<l:VerticalLayout class=\"sapUiContentPadding\">\n\t\t\t\t\t\t<l:content>\n\t\t\t\t\t\t\t<Label text=\"Switch On/Off:\" labelFor=\"__switch0\"/><Switch id=\"__switch0\" change=\"onSwitch\"/>\n\t\t\t\t\t\t\t<Button text=\"Get Current State\" width=\"150px\" id=\"__button0\" press=\"onPress\"/>\n\t\t\t\t\t\t</l:content>\n\t\t\t\t\t</l:VerticalLayout>\n\t\t\t\t\t<l:VerticalLayout class=\"sapUiContentPadding\"  width=\"100%\">\n\t\t\t\t\t\t<l:content>\n\t\t\t\t\t\t\t<Label text=\"Current State of CapsLock:\" labelFor=\"__switch0\"/>\n\t\t\t\t\t\t\t<Text id=\"txtCapsLock\" text=\"{C_LEDSTATE}\"/>\n\t\t\t\t\t\t\t<Label text=\"Timestamp:\" labelFor=\"__switch0\"/>\n\t\t\t\t\t\t\t<Text id=\"txtTimeStamp\" text=\"{C_TIMESTAMP}\"/>\n\t\t\t\t\t\t</l:content>\n\t\t\t\t\t\t<l:content>\n\t\t\t\t\t\t\t<Table visible=\"true\" id=\"table\" updateFinished=\"onUpdateDone\" fixedLayout=\"true\" items=\"{path:'/T_IOT_9658E7591BA1F6500040',sorter : { path : 'C_TIMESTAMP', descending : true },length : '1',parameters: '$top=10'}\" width=\"auto\" class=\"sapUiResponsiveMargin\" growingScrollToLoad=\"false\" growing=\"false\">\n\t\t\t\t\t\t\t\t<columns>\n\t\t\t\t\t\t\t\t\t<Column id=\"nameColumn\">\n\t\t\t\t\t\t\t\t\t\t<Text text=\"Time Stamp\" id=\"nameColumnTitle\"/>\n\t\t\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t\t\t<Column id=\"unitNumberColumn\" hAlign=\"End\">\n\t\t\t\t\t\t\t\t\t\t<Text text=\"CapLock State\" id=\"unitNumberColumnTitle\"/>\n\t\t\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t\t</columns>\n\t\t\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t\t\t<ColumnListItem modelContextChange=\"onModelChange\">\n\t\t\t\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t\t\t\t<ObjectIdentifier title=\"{C_TIMESTAMP}\"/>\n\t\t\t\t\t\t\t\t\t\t\t<ObjectNumber unit=\"{C_LEDSTATE}\"/>\n\t\t\t\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t\t\t\t</ColumnListItem>\n\t\t\t\t\t\t\t\t</items>\n\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t</l:content>\n\t\t\t\t\t</l:VerticalLayout>\n\t\t\t\t</content>\n\t\t\t\t<content>\n\t\t\t\t\t<!--<ScrollContainer height=\"100%\" width=\"100%\" horizontal=\"true\" vertical=\"true\" focusable=\"true\">-->\n\t\t\t\t\t<!--</ScrollContainer>-->\n\t\t\t\t</content>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"vspiotled/Component.js": "sap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/Device\",\n\t\"vspiotled/model/models\"\n], function(UIComponent, Device, models) {\n\t\"use strict\";\n\n\treturn UIComponent.extend(\"vspiotled.Component\", {\n\n\t\tmetadata: {\n\t\t\tmanifest: \"json\"\n\t\t},\n\n\t\t/**\n\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tinit: function() {\n\t\t\t// call the base component's init function\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t// set the device model\n\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\n\t\t}\n\t});\n});",
		"vspiotled/utils/IOT.js": "jQuery.sap.declare(\"sap.services.IOT\");\r\n\r\nsap.ui.define([\"sap/services/IOT\"], function() {\r\n\t\"use strict\";\r\n    \r\n    /**\r\n     * Simplify the consumption of the API functions provided by SAP Internet of Thing service.\r\n     *\r\n     * @namespace\r\n     * @name sap.services.IOT\r\n     * @public\r\n     */\r\n\r\n\tvar _dmsUrl = \"/iotrdms/\",\r\n\t\t_mmsUrl = \"/iotmms/\";\r\n\r\n\tvar _showError = function(msg) {\r\n\t\tif(sap.ui.commons && typeof sap.ui.commons.MessageBox.show === \"function\") {\r\n\t\t\tsap.ui.commons.MessageBox.show(msg, \"ERROR\", \"Error\");\r\n\t\t} else if(sap.m && sap.m.MessageBox && typeof sap.m.MessageBox.error === \"function\") {\r\n\t\t\tsap.m.MessageBox.error(msg);\r\n\t\t} else {\r\n\t\t\talert(msg);\r\n\t\t}\r\n\t};\r\n\tvar _handleError = function(para) {\r\n\t\tif(para.responseJSON && para.responseJSON.errors) {\r\n\t\t\tfor(var idx in para.responseJSON.errors) {\r\n\t\t\t\tvar err = para.responseJSON.errors[idx];\r\n\t\t\t\t_showError(err.description);\r\n\t\t\t}\r\n\t\t} else if(para.responseText) {\r\n\t\t\t_showError(para.responseText);\r\n\t\t} else {\r\n\t\t\t_showError(\"Unknown error!\");\r\n\t\t}\r\n\t};\r\n\tvar _request = function(method, url, data, callback, failCB, options) {\r\n\t\tvar req = {\r\n\t\t\tmethod: method,\r\n\t\t\turl: url,\r\n\t\t\tcontentType: \"application/json\"\r\n\t\t};\r\n\t\tif(data) {\r\n\t\t\treq.data = JSON.stringify(data);\r\n\t\t}\r\n\t\tif(options) {\r\n\t\t\tfor(var n in options) {\r\n\t\t\t\treq[n] = options[n];\r\n\t\t\t}\r\n\t\t}\r\n\t\t$.ajax(req).done(function(res) {\r\n\t\t\tif(typeof callback === \"function\") {\r\n\t\t\t\tcallback(res);\r\n\t\t\t}\r\n\t\t}).fail(function(err) {\r\n\t\t\tif(typeof failCB === \"function\") {\r\n\t\t\t\tfailCB(err);\r\n\t\t\t} else{\r\n\t\t\t\t_handleError(err);\r\n\t\t\t}\r\n\t\t\tif(typeof callback === \"function\") {\r\n\t\t\t\tcallback();\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\tvar _get = function(url, done, fail, options) {\r\n\t\t_request(\"GET\", url, null, done, fail, options);\r\n\t};\r\n\tvar _delete = function(url, done, fail, options) {\r\n\t\t_request(\"DELETE\", url, null, done, fail, options);\r\n\t};\r\n\tvar _post = function(url, data, done, fail, options) {\r\n\t\t_request(\"POST\", url, data, done, fail, options);\r\n\t};\r\n\tvar _put = function(url, data, done, fail, options) {\r\n\t\t_request(\"PUT\", url, data, done, fail, options);\r\n\t};\r\n\r\n    /**\r\n     * Set the bas url for the device management and message management services\r\n     * \r\n     * @param {string} dmsUrl - the base url for the device management service\r\n     * @param {string} mmsUrl - the base url for the message management service\r\n     * @return {undefined} [This is empty return value desc]\r\n     * @function\r\n     * @name sap.services.IOT.setServiceUrl\r\n     * @public\r\n     */\r\n\tvar setServiceUrl = function(dmsUrl, mmsUrl) {\r\n\t\tif(dmsUrl.substr(dmsUrl.length-1) !== \"/\") {\r\n\t\t\tdmsUrl += \"/\";\r\n\t\t}\r\n\t\tif(mmsUrl.substr(mmsUrl.length-1) !== \"/\") {\r\n\t\t\tmmsUrl += \"/\";\r\n\t\t}\r\n\t\t_dmsUrl = dmsUrl;\r\n\t\t_mmsUrl = mmsUrl;\r\n\t};\r\n    /**\r\n     * Get the base url of message management service\r\n     * \r\n     * @return {string} the base url for the message management service\r\n     * @function\r\n     * @name sap.services.IOT.getMmsUrl\r\n     * @public\r\n     */\r\n\tvar getMmsUrl = function() {\r\n\t\treturn _mmsUrl;\r\n\t};\r\n    /**\r\n     * Get the base url of device management service\r\n     * \r\n     * @return {string} the base url for the device management service\r\n     * @function\r\n     * @name sap.services.IOT.getDmsUrl\r\n     * @public\r\n     */\r\n\tvar getDmsUrl = function() {\r\n\t\treturn _dmsUrl;\r\n\t};\r\n    /**\r\n     * Get all supported Data Types\r\n     * \r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.getDataTypes\r\n     * @public\r\n     */\r\n\tvar getDataTypes = function(done, fail, options) {\r\n\t\t_get(_dmsUrl + \"datatypes\", done, fail, options);\r\n\t};\r\n    /**\r\n     * Get all Device Types\r\n     * \r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.getDeviceTypes\r\n     * @public\r\n     */\r\n\tvar getDeviceTypes = function(done, fail, options) {\r\n\t\t_get(_dmsUrl + \"devicetypes\", done, fail, options);\r\n\t};\r\n    /**\r\n     * Get all Message Types\r\n     * \r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.getMessageTypes\r\n     * @public\r\n     */\r\n\tvar getMessageTypes = function(done, fail, options) {\r\n\t\t_get(_dmsUrl + \"messagetypes\", done, fail, options);\r\n\t};\r\n    /**\r\n     * Get all Devices\r\n     * \r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.getDevices\r\n     * @public\r\n     */\r\n\tvar getDevices = function(done, fail, options) {\r\n\t\t_get(_dmsUrl + \"devices\", done, fail, options);\r\n\t};\r\n    /**\r\n     * Delete a Device Type\r\n     * \r\n     * @param {string} id - The ID of the Device Type to be deleted.\r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.deleteDeviceType\r\n     * @public\r\n     */\r\n\tvar deleteDeviceType = function(id, done, fail, options) {\r\n\t\t_delete(_dmsUrl + \"devicetypes/\" + id, done, fail, options);\r\n\t};\r\n    /**\r\n     * Delete a Message Type\r\n     * \r\n     * @param {string} id - The ID of the Message Type to be deleted.\r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.deleteMessageType\r\n     * @public\r\n     */\r\n\tvar deleteMessageType = function(id, done, fail, options) {\r\n\t\t_delete(_dmsUrl + \"messagetypes/\" + id, done, fail, options);\r\n\t};\r\n    /**\r\n     * Delete a Device\r\n     * \r\n     * @param {string} id - The ID of the Device to be deleted.\r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.deleteDevice\r\n     * @public\r\n     */\r\n\tvar deleteDevice = function(id, done, fail, options) {\r\n\t\t_delete(_dmsUrl + \"devices/\" + id, done, fail, options);\r\n\t};\r\n    /**\r\n     * Add a Device Type\r\n     * \r\n     * @param {string} name - The name of the Device Type to be added.\r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.addDeviceType\r\n     * @public\r\n     */\r\n\tvar addDeviceType = function(name, done, fail, options) {\r\n\t\t_post(_dmsUrl + \"devicetypes\", {name: name}, done, fail, options);\r\n\t};\r\n    /**\r\n     * Add a Message Type\r\n     * \r\n     * @param {object} data - A message type object to be added\r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.addMessageType\r\n     * @public\r\n     */\r\n\tvar addMessageType = function(data, done, fail, options) {\r\n\t\tdata.fields = data.fields || [];\r\n\t\tfor(var n=0;n<data.fields.length;n++) {\r\n\t\t\tdata.fields[n].position = n+1;\r\n\t\t}\r\n\t\t_post(_dmsUrl + \"messagetypes\", data, done, fail, options);\r\n\t};\r\n    /**\r\n     * Add a Device\r\n     * \r\n     * @param {string} name - The name of the Device to be added.\r\n     * @param {string} dtype - The ID of a previously defined device type\r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.addDevice\r\n     * @public\r\n     */\r\n\tvar addDevice = function(name, dtype, done, fail, options) {\r\n\t\t_post(_dmsUrl + \"devices\", {\r\n\t\t\tname: name, device_type: dtype\r\n\t\t}, done, fail, options);\r\n\t};\r\n    /**\r\n     * to retrieve all properties for the overall Internet of Things service.\r\n     * \r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.getConfig\r\n     * @public\r\n     */\r\n\tvar getConfig = function(done, fail, options) {\r\n\t\t_get(_mmsUrl + \"config\", done, fail, options);\r\n\t};\r\n    /**\r\n     * to set properties for the overall Internet of Things service.\r\n     * \r\n     * @param {object} config - properties to be configured\r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.setConfig\r\n     * @public\r\n     */\r\n\tvar setConfig = function(config, done, fail, options) {\r\n\t\t_put(_mmsUrl + \"config\", config, done, fail, options);\r\n\t};\r\n    /**\r\n     * to customize database table mapping for messages\r\n     * \r\n     * @param {string} dtype - The ID of a specific device type\r\n     * @param {string} messageType - Refers to the ID of a message type\r\n     * @param {object} properties - config properties\r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.mapTable\r\n     * @public\r\n     */\r\n\tvar mapTable = function(dtype, messageType, properties, done, fail, options) {\r\n\t\tvar config = {\r\n\t\t  \"deviceType\": dtype,\r\n\t\t  \"messageType\": messageType,\r\n\t\t  \"processingServices\": [\r\n\t\t    {\r\n\t\t      \"name\": \"sql\",\r\n\t\t      \"properties\": properties\r\n\t\t    }\r\n\t\t  ]\r\n\t\t};\r\n\t\t_put(_mmsUrl + \"processing\", config, done, fail, options);\r\n\t};\r\n    /**\r\n     * Receiving messages that have been pushed to a specific device.\r\n     * \r\n     * @param {string} device - ID for the specified device.\r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.getData\r\n     * @public\r\n     */\r\n\tvar getData = function(device,done, fail, options) {\r\n\t\t_get(_mmsUrl + \"data/\" + device, done, fail, options);\r\n\t};\r\n    /**\r\n     * Sending data to an endpoint.\r\n     * \r\n     * @param {string} device - ID for the specified device.\r\n     * @param {string} mode - An optional field to control the data sending mode: sync, async, async-ack\r\n     * @param {string} messageType - Refers to the ID of the message type\r\n     * @param {object} messages - message object to be sent\r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.postData\r\n     * @public\r\n     */\r\n\tvar postData = function(device, mode, messageType, messages, done, fail, options) {\r\n\t\t_post(_mmsUrl + \"data/\" + device, {\r\n\t\t\tmode: mode,\r\n\t\t\tmessageType: messageType,\r\n\t\t\tmessages: messages\r\n\t\t}, done, fail, options);\r\n\t};\r\n    /**\r\n     * Pushing messages to devices\r\n     * \r\n     * @param {string} device - ID for the specified device.\r\n     * @param {string} method - Specify the push method you want to use, either 'http' or 'ws'.\r\n     * @param {string} sender - Sender name\r\n     * @param {string} messageType - Refers to the ID of the message type\r\n     * @param {object} messages - message object to be sent\r\n     * @param {function} done - call back function to be called when the request finishes\r\n     * @param {function} fail - Optional callback function for error handling\r\n     * @param {object} options - Optional properties for the request\r\n     * @function\r\n     * @name sap.services.IOT.pushData\r\n     * @public\r\n     */\r\n\tvar pushData = function(device, method, sender, messageType, messages, done, fail, options) {\r\n\t\t//var sUrl = \"https://iotmmsp651606trial.hanatrial.ondemand.com/com.sap.iotservices.mms/v1/api/http/push/1ac8a403-d4ec-4279-a31e-985127275d8b\";\r\n\t\t_post(_mmsUrl + \"push/\" + device, {\r\n\t\t//_post(sUrl, {\r\n\t\t\tmethod: method,\r\n\t\t\tmessageType: messageType,\r\n\t\t\tsender: sender,\r\n\t\t\tmessages: messages\r\n\t\t}, done, fail, options);\r\n\t};\r\n\tvar oauth = function(id, password, scope, done, fail) {\r\n\t\t///*\r\n\t\tvar req = {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\turl: \"/oauth/token\",\r\n\t\t\tcontentType: \"application/x-www-form-urlencoded\",\r\n\t\t\theaders: {\r\n\t\t\t\t'Authorization': \"Basic \" + btoa(id + \":\" + password)\r\n\t\t\t},\r\n\t\t\tdata: {\r\n\t\t\t\t'grant_type': 'client_credentials',\r\n\t\t\t\t'scope': scope\r\n\t\t\t}\r\n\t\t};\r\n\t\t$.ajax(req).done(function(res) {\r\n\t\t\tdone(res);\r\n\t\t}).fail(function(err) {\r\n\t\t\tif(typeof fail === \"function\") {\r\n\t\t\t\tfail(err);\r\n\t\t\t} else{\r\n\t\t\t\t_handleError(err);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\tif(location.protocol !== \"https:\") {\r\n\t\tsetServiceUrl(\r\n\t\t\t\"https://iotrdmsx36737db5-p651606trial.hanatrial.ondemand.com/com.sap.iotservices.dms/v2/api/\",\r\n\t\t\t\"https://iotmmsp651606trial.hanatrial.ondemand.com/com.sap.iotservices.mms/v1/api/http\");\r\n\t}\r\n\r\n\tsap.services.IOT = {\r\n\t\tsetServiceUrl: setServiceUrl,\r\n\t\tgetMmsUrl: getMmsUrl,\r\n\t\tgetDmsUrl: getDmsUrl,\r\n\t\t// RDMS api\r\n\t\tgetDataTypes: getDataTypes,\r\n\t\tgetDeviceTypes: getDeviceTypes,\r\n\t\tgetMessageTypes: getMessageTypes,\r\n\t\tgetDevices: getDevices,\r\n\t\tdeleteDeviceType: deleteDeviceType,\r\n\t\tdeleteMessageType: deleteMessageType,\r\n\t\tdeleteDevice: deleteDevice,\r\n\t\taddDeviceType: addDeviceType,\r\n\t\taddMessageType: addMessageType,\r\n\t\taddDevice: addDevice,\r\n\t\t// MMS api\r\n\t\tgetConfig: getConfig,\r\n\t\tsetConfig: setConfig,\r\n\t\tmapTable: mapTable,\r\n\t\tgetData: getData,\r\n\t\tpostData: postData,\r\n\t\tpushData: pushData,\r\n\t\t//OAuth api\r\n\t\toauth: oauth\r\n\t};\r\n\r\n\t\r\n\t\r\n\treturn sap.services.IOT;\r\n});",
		"vspiotled/controller/main.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"vspiotled/utils/IOT\",\n\t\"sap/m/MessageToast\",\n\t\"sap/ui/model/Sorter\"\n], function(Controller, IOT, MessageToast, Sorter) {\n\t\"use strict\";\n\t\n\treturn Controller.extend(\"vspiotled.controller.main\", {\n\t\tonInit: function() {\n\n\t\t},\n\t\t/**\n\t\t * Called when the View has been rendered (so its HTML is part of the document). \n\t\t * Post-rendering manipulations of the HTML could be done here.\n\t\t * This hook is the same one that SAPUI5 controls get after being rendered.\n\t\t * @memberOf ui5lifecycledemo.main\n\t\t */\n\t\tonAfterRendering: function(oEvent) {\n\t\t\t},\n\t\t/**\n\t\t *@memberOf vspiotled.controller.main\n\t\t */\n\t\tonSwitch: function(oEvent) {\n\t\t\t//This code was generated by the layout editor.\n\t\t\tMessageToast.show(\"HelloAjax!\");\n\t\t\t//console.log();\n\t\t\t//var sDeviceId = \"1ac8a403-d4ec-4279-a31e-985127275d8b\";\n\t\t\tvar sDeviceId = \"17a0ae42-ef16-433a-854c-7d38d1ee4f0a\";\n\t\t\t//var sMessageTypeId = \"91d1662d282a6b431c37\";\n\t\t\tvar sMessageTypeId = \"753dfe8f3261014c6d41\";\n\t\t\tvar seconds = new Date().getTime();\n\t\t\tvar message = [{\n\t\t\t\t\"timestamp\": parseInt(seconds / 1000),\n\t\t\t\t\"Censor1\": \"led\",\n\t\t\t\t\"Censor2\": oEvent.getSource().getState()\n\t\t\t}];\n\t\t\tIOT.pushData(sDeviceId, \"http\", \"My IOT UI5\", sMessageTypeId, message, function(result) {\n\t\t\t\tMessageToast.show(\"Message send!\");\n\t\t\t}, function(error) {\n\t\t\t\tMessageToast.show(\"Message error!\" + error.responseText);\n\t\t\t});\n\t\t},\n\n\t\tonUpdateDone: function(oEvent) {\n\t\t\t//\talert(\"update done\");\n\t\t\tvar state = this.getModel().getObject(this.getView().byId(\"table\").getItems()[0].getBindingContext().getPath(), this.getView().byId(\n\t\t\t\t\"table\").getItems()[0].getBindingContext());\n\t\t\tthis.getView().byId(\"txtCapsLock\").setText(state.C_LEDSTATE);\n\t\t\tthis.getView().byId(\"txtTimeStamp\").setText(state.C_TIMESTAMP);\n\t\t\tthis.getView().byId(\"__switch0\").setState(state.C_LEDSTATE);\n\t\t},\n\n\t\t/**\n\t\t *@memberOf vspiotled.controller.main\n\t\t */\n\t\tonPress: function(oEvent) {\n\t\t\tvar laSorters = new Array();\n\t\t\tvar sort = new sap.ui.model.Sorter(\"C_TIMESTAMP\", true);\n\t\t\tlaSorters.push(sort);\n\t\t\tvar urlParams = \"$top=1\";\n\t\t\tvar allthis = this;\n\t\t\t/*\t\t\tvar readData = this.getModel().read(\"/T_IOT_9658E7591BA1F6500040\",{sorters: laSorters,urlParameters:urlParams, success: function(oData,Response){\n\t\t\t\t\t\t\tconsole.log(oData);\n\t\t\t\t\t\t\tconsole.log(allthis.getModel());\n\t\t\t\t\t\t}, error: function(error){\n\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t}});\n\t\t\t\t\t\tconsole.log(readData);\n\t\t\t\t\t\t*/\n\t\t\tthis.getView().byId(\"table\").unbindItems();\n\t\t\tvar oTemplate = new sap.m.ColumnListItem({\n\t\t\t\tcells: [\n\t\t\t\t\tnew sap.m.Text({\n\t\t\t\t\t\ttext: \"{C_TIMESTAMP}\"\n\t\t\t\t\t}),\n\t\t\t\t\tnew sap.m.Text({\n\t\t\t\t\t\ttext: \"{C_LEDSTATE}\"\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t});\n\n\n\n\t\t\tthis.getView().byId(\"table\").bindItems({\n\t\t\t\tpath: \"/T_IOT_9658E7591BA1F6500040\",\n\t\t\t\tlength: \"1\",\n\t\t\t\ttemplate: oTemplate,\n\t\t\t\tsorter: sort,\n\t\t\t\tparameters: urlParams\n\t\t\t});\n\n\t\t\t//this.getModel().refresh(false, false);\n\t\t\t//\tthis.getView().byId(\"table\").setSelectedItem(\"1\",true);\n\n\t\t\t//\tconsole.log(this.getView().byId(\"table\").getItems()[0].getBindingContext());\n\t\t\t//\tconsole.log(this.getModel().getKey(this.getView().byId(\"table\").getItems()[0].getBindingContext().getPath()));\n\n\t\t\t//var oModel = this.getModel();\n\n\t\t\tvar interval = setInterval(function() {\n\t\t\t\tallthis.getView().byId(\"table\").bindItems({\n\t\t\t\t\tpath: \"/T_IOT_9658E7591BA1F6500040\",\n\t\t\t\t\tlength: \"1\",\n\t\t\t\t\ttemplate: oTemplate,\n\t\t\t\t\tsorter: sort,\n\t\t\t\t\tparameters: urlParams\n\t\t\t\t});\n\t\t\t\tallthis.getModel().refresh(true,true);\n\t\t\t}, 1000);\n\t\t},\n\n\t\tgetModel: function(sName) {\n\t\t\treturn this.getView().getModel(sName);\n\t\t},\n\t\tsetModel: function(oModel, sName) {\n\t\t\treturn this.getView().setModel(oModel, sName);\n\t\t},\n\t\t/**\n\t\t *@memberOf vspiotled.controller.main\n\t\t */\n\t\tonModelChange: function() {\n\t\t\t//This code was generated by the layout editor.\n\t\t\t//\talert(\"hello\");\n\t\t}\n\t});\n});",
		"vspiotled/model/models.js": "sap.ui.define([\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\"\n], function(JSONModel, Device) {\n\t\"use strict\";\n\n\treturn {\n\n\t\tcreateDeviceModel: function() {\n\t\t\tvar oModel = new JSONModel(Device);\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t}\n\n\t};\n});"
	}
});